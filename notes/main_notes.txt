# asserts
assert_equal expected_value, actual_value
  same as..,
assert expected_value == actual_value

# nil
nil is an object
nil has a few methods defined for it ( .inspect, .nil?, .to_s )

# objects
all objects have seperate object_id's
if you call .clone on an object, it creates another object with seperate object_id

# arrays
arrays are indexed starting at [0, 1, 2, 3]
arrays and ranges are not the same thing
you can call .to_a on a range to turn it into an array
slicing an array with a range:
array = ["hi", "bye", "fly", "sky"]
array[0..2] = ["hi", "bye", "fly"]
array[2..-1] = ["fly", "sky"]

.push("something") pushes "something" into the last space of an array
.pop pop's the last item off of an array
.unshift("something") pushes "something" into the first space of an array
.shift pop's the first item off of an array

# array assignment
you can parallely assign variables by doing:
name1, name2 = ["firstname", "secondname"]
if there is an extra value, the extra val will not be included
with a splat, all of the extra vals will be shoved into the var assigned w/ the splat
name1, *name2 = ["firstname", "secondname", "thirdname"]
name2 = ["secondname", "thirdname"]
with too few variables, the extra vars will be nil

# hashes
trying to access a hash value : hash[:value] where value doesn't exist returns nil
you can see an array of all of the hashes keys || values with hash.key || hash.values
you can merge in new values with #merge, it will update values that are existant and add the ones that arent

# symbols
duplicate symbols with the same name have the same object_id
symbols can be created by doing to the following:
  :"cats and dogs"
symbols are not immutable strings, although they are immutable
symbols cannot be modified like strings
They are only put into memory once, making them very efficient to use for things like keys in hashes but they stay in memory until the program exits. This makes them a memory hog if you misuse them.

# regular expressions
assert_equal "match", "some matching content"[/match/] is true
assert_equal "a", "abbcccddddeeeee"[/az?/] the ? is means optional
assert_equal "bccc", "abbcccddddeeeee"[/bc+/] + means one or more
assert_equal "", "abbcccddddeeeee"[/z*/] * means zero or more
assert_equal ["cat", "bat", "rat"], animals.select { |a| a[/[cbr]at/] } the [cbr] allow c, b, or r to be mathed

# methods
wrong number of errors is a runtime error, not a syntax error
can set method defaults in the method definition's arguments

# keyword arguments
method_with_keyword_arguments(one: 1, two: 'two')

# Constants
calling a constant within scope will return the constant
calling a constant out of scope with ::C will return the out of scope constant
nested classes inherit constants from enclosing constants, as well as subclasses

# control statements
EVERY statement in ruby will return a value, not just if statements
(true ? :true_value : :false_value) condition operators same as:
if true
  :true_value
else
  :false_value
end
result = :true_value if true    - this is an if statement operator
unless false is the same as if true
this is an important lesson, probably should return here @ some point























